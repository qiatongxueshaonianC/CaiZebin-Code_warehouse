#include<bits/stdc++.h>
using namespace std;
const int maxn=510;
int N,M,degree[maxn]; 
vector<vector<int> >G(maxn);
bool BFS(int st){
	set<int> vis;
	queue<int> q;
	q.push(st);
	vis.insert(st);
	while(!q.empty()){
		int now=q.front();q.pop();
		for(auto i:G[now]){
			if(vis.find(i)==vis.end()){
				q.push(i);
				vis.insert(i);
			}
		}
	}
	return vis.size()==N?true:false;
}
int main() {
	std::ios::sync_with_stdio(false);
	cin.tie(nullptr);cout.tie(nullptr);
	cin>>N>>M;
	for(int i=0;i<M;i++){
		int u,v;
		cin>>u>>v;
		degree[u]++;
		degree[v]++;
		G[u].push_back(v);
		G[v].push_back(u);
	}
	for(int i=1;i<=N;i++)
		cout<<degree[i]<<(i==N?"\n":" ");
	int odd=0;
	if(!BFS(1)){	//判断是否连通 
		puts("Non-Eulerian");
		return 0;
	}
	for(int i=1;i<=N;i++){
		if(degree[i]&1)
			odd++;
	}
	if(odd==0)
		puts("Eulerian");
	else if(odd==2)
		puts("Semi-Eulerian");
	else
		puts("Non-Eulerian");
	return 0;
}
/*
7 12
5 7
1 2
1 3
2 3
2 4
3 4
5 2
7 6
6 3
4 5
6 4
5 6

6 10
1 2
1 3
2 3
2 4
3 4
5 2
6 3
4 5
6 4
5 6

5 8
1 2
2 5
5 4
4 1
1 3
3 2
3 4
5 3
*/
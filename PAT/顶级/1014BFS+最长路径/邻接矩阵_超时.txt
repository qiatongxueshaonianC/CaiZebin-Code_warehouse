#include<bits/stdc++.h>
using namespace std; 
const int maxn=1005;
int G[maxn][maxn],N,Max;//,depth[maxn]={0};
bool vis[maxn];
void BFS(int s){
	queue<int> q;
	q.push(s);
	bool inq[N+5]={false};
	vis[s]=true;
	inq[s]=true;
	int depth[N+5]={0};
	while(!q.empty()){
		int u=q.front();q.pop();
		Max=max(Max,depth[u]);
		for(int i=1;i<=N;i++){
			if(G[u][i]&&!inq[i]){
				depth[i]=depth[u]+1;
				inq[i]=vis[i]=true;
				q.push(i);
			}
		}
	}
}
int main() {
	scanf("%d",&N);
	for(int i=1;i<=N;i++){
		int k,v;scanf("%d",&k);
		for(int j=0;j<k;j++){
			scanf("%d",&v);
			G[i][v]=G[v][i]=1;
		}
	}
	int blocks=0;
	for(int i=1;i<=N;i++){
		if(!vis[i])
			blocks++;
		BFS(i);
	}
	printf("%d %d",blocks,max(0,Max-1));
	return 0; 
}
/*
17
2 15 12
1 17
2 16 9
1 8
4 10 13 15 14
0
2 11 14
1 4
2 2 3
2 13 11
2 15 7
2 1 14
2 5 15
0
0
1 3
1 2
*/
#include<bits/stdc++.h>
using namespace std; 
struct recorder{
	string car,time,state;
	recorder(string a,string b,string c){
		car=a;
		time=b;
		state=c;
	}
	bool friend operator <(recorder u,recorder v){
		return u.time<v.time;
	}
};
struct Car{
	string in,out,sta_time;
};
set<recorder> st;
int binary_search(int low,int high,string v,vector<pair<string,int>>A){
	while(low<high){
		int mid=(low+high)/2;
	//	printf("%s\n",A[mid].first.c_str());
		if(v<A[mid].first)
			high=mid;
		else low=mid+1;
	}
	return low;
}
int main() {
	string car,time,state;
	int N,K;
	map<string,char> mp;
	scanf("%d%d",&N,&K);
	for(int i=0;i<N;i++){
		cin>>car>>time>>state;
		st.insert(recorder(car,time,state));
	}
	vector<pair<string,int>> vct_Time;
	vector<pair<string,Car>> vct_Car;
	puts("");
	for(auto i:st){
	//	printf("%s %s %s\n",i.car.c_str(),i.time.c_str(),i.state.c_str());
		if(mp.find(i.car)!=mp.end()){
			if(mp[i.car]==i.state[0])
				continue;
			mp[i.car]=i.state[0];
			pair<string,int> tp=vct_Time.back();
			if(i.state[0]=='i')
				tp.second++;
			else tp.second--;
			vct_Time.push_back({i.time,tp.second});
		}else{
			if(i.state[0]=='o')
				continue;
			mp[i.car]=i.state[0];
			if(vct_Time.size()>0){
				pair<string,int> tp=vct_Time.back();
				tp.second++;
				vct_Time.push_back({i.time,tp.second});
			}
			else vct_Time.push_back({i.time,1});
		}
	}
	string query;
	while(K--){
		cin>>query;
		int it=binary_search(0,vct_Time.size(),query,vct_Time);
		printf("%d\n",vct_Time[--it].second);
	}
	return 0;
}
/*
16 7
JH007BD 18:00:01 in
ZD00001 11:30:08 out
DB8888A 13:00:00 out
ZA3Q625 23:59:50 out
ZA133CH 10:23:00 in
ZD00001 04:09:59 in
JH007BD 05:09:59 in
ZA3Q625 11:42:01 out
JH007BD 05:10:33 in
ZA3Q625 06:30:50 in
JH007BD 12:23:42 out
ZA3Q625 23:55:00 in
JH007BD 12:24:23 out
ZA133CH 17:11:22 out
JH007BD 18:07:01 out
DB8888A 06:30:50 in
05:10:00
06:30:50
11:00:00
12:23:42
14:00:00
18:00:00
23:59:00
*/






#include<bits/stdc++.h>
using namespace std; 
struct recorder{
	string car,time,state;
	recorder(string a,string b,string c){
		car=a;
		time=b;
		state=c;
	}
	bool friend operator <(recorder u,recorder v){
		return u.time<v.time;
	}
};
struct Car{
	vector<string> in_out;
	int sta_time;
};
set<recorder> st;
int binary_search(int low,int high,string v,vector<pair<string,int>>A){
	while(low<high){
		int mid=(low+high)/2;
		if(v<A[mid].first)
			high=mid;
		else low=mid+1;
	}
	return low;
}
int main() {
	string car,time,state;
	int N,K;
	map<string,char> mp;
	scanf("%d%d",&N,&K);
	for(int i=0;i<N;i++){
		cin>>car>>time>>state;
		st.insert(recorder(car,time,state));
	}
	vector<pair<string,int>> vct_Time;
	
	puts("");
	for(auto i:st){
	//	printf("%s %s %s\n",i.car.c_str(),i.time.c_str(),i.state.c_str());
		if(mp.find(i.car)!=mp.end()){
			if(mp[i.car]==i.state[0])
				continue;
			mp[i.car]=i.state[0];
			pair<string,int> tp=vct_Time.back();
			if(i.state[0]=='i')
				tp.second++;
			else tp.second--;
			vct_Time.push_back({i.time,tp.second});
		}else{
			if(i.state[0]=='o')
				continue;
			mp[i.car]=i.state[0];
			if(vct_Time.size()>0){
				pair<string,int> tp=vct_Time.back();
				tp.second++;
				vct_Time.push_back({i.time,tp.second});
			}
			else vct_Time.push_back({i.time,1});
		}
	}
	string query;
	while(K--){
		cin>>query;
		int it=binary_search(0,vct_Time.size(),query,vct_Time);
		printf("%d\n",vct_Time[--it].second);
	}
	return 0;
}
/*
16 7
JH007BD 18:00:01 in
ZD00001 11:30:08 out
DB8888A 13:00:00 out
ZA3Q625 23:59:50 out
ZA133CH 10:23:00 in
ZD00001 04:09:59 in
JH007BD 05:09:59 in
ZA3Q625 11:42:01 out
JH007BD 05:10:33 in
ZA3Q625 06:30:50 in
JH007BD 12:23:42 out
ZA3Q625 23:55:00 in
JH007BD 12:24:23 out
ZA133CH 17:11:22 out
JH007BD 18:07:01 out
DB8888A 06:30:50 in
05:10:00
06:30:50
11:00:00
12:23:42
14:00:00
18:00:00
23:59:00
*/
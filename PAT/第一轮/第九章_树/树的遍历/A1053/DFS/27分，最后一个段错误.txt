#include<bits/stdc++.h>
using namespace std;
const int maxn=110;
struct Node{
	int weight;
	vector<int> child;
}Tree[maxn];
int n,m,Sqr,num_ans;
vector<int> temp,ans[maxn];
void DFS(int s,int val){
	if(Tree[s].child.size()==0&&val==Sqr){
		temp.push_back(Tree[s].weight);
		ans[num_ans++]=temp;
		temp.pop_back();
		return;
	}
	temp.push_back(Tree[s].weight);
	for(auto i:Tree[s].child){
		if(val+Tree[i].weight>Sqr) continue;
		DFS(i,val+Tree[i].weight);
	}
	temp.pop_back();
}
bool cmp(int a,int b){
	vector<int> c,d;
	c=ans[a];d=ans[b];
	for(int i=0;i<c.size()&&i<d.size();i++){
		if(c[i]>d[i]) return a>b;
		if(c[i]<d[i]) return b>a;
	}
	if(c.size()<d.size()) return b>a;
}
int main() {
	scanf("%d%d%d",&n,&m,&Sqr);
	int id,num,v;
	for(int i=0;i<n;i++){
		scanf("%d",&v);
		Tree[i].weight=v;
	}
	for(int i=0;i<m;i++){
		scanf("%d%d",&id,&num);
		for(int i=0;i<num;i++){
			scanf("%d",&v);
			Tree[id].child.push_back(v);
		}
	}
	DFS(0,Tree[0].weight);
	int vis[maxn];
	iota(vis,vis+num_ans,0);
	sort(vis,vis+num_ans,cmp);
	for(int i=0;i<num_ans;i++){
		int u=vis[i];
		num=0;
		for(auto j:ans[u]){
			printf("%d",j);
			if(++num<ans[u].size()) printf(" ");
		}
		puts("");
	}
	return 0;
}
/*
20 9 24
10 2 4 3 5 10 2 18 9 7 2 2 1 3 12 1 8 6 2 2
00 4 01 02 03 04
02 1 05
04 2 06 07
03 3 11 12 13
06 1 09
07 2 08 10
16 1 15
13 3 14 16 17
17 2 18 19
*/
#include<bits/stdc++.h>
using namespace std; 
struct Node{
	int c,m,e,a;
	string id;
	set<pair<int,char>> rank;
	Node(string s,int x,int y,int z){
		id=s;
		c=x;m=y,e=z;a=(x+y+z)/3;
	}
	Node(){	}
};
map<string,Node> mp;
vector<Node> vct;
int n,m;
bool cmp1(Node u,Node v){
	return u.a>v.a; 
}
bool cmp2(Node u,Node v){
	return u.c>v.c; 
}
bool cmp3(Node u,Node v){
	return u.m>v.m; 
}
bool cmp4(Node u,Node v){
	return u.e>v.e; 
}
int main() {
	cin>>n>>m;
	string id;
	int c,m,e;
	for(int i=0;i<n;i++){
		cin>>id>>c>>m>>e;
		Node node(id,c,m,e);
		mp.insert({id,node});
		vct.push_back(node);
	}
	sort(vct.begin(),vct.end(),cmp1);
	for(int i=0;i<vct.size();i++){
		mp[vct[i].id].rank.insert({i+1,'A'});
	}
	sort(vct.begin(),vct.end(),cmp2);
	for(int i=0;i<vct.size();i++){
		mp[vct[i].id].rank.insert({i+1,'C'});
	}
	sort(vct.begin(),vct.end(),cmp3);
	for(int i=0;i<vct.size();i++){
		mp[vct[i].id].rank.insert({i+1,'M'});
	}
	sort(vct.begin(),vct.end(),cmp4);
	for(int i=0;i<vct.size();i++){
		mp[vct[i].id].rank.insert({i+1,'E'});
	}
	for(int i=0;i<m;i++){
		cin>>id;
		if(mp.find(id)==mp.end()){
			puts("N/A");
			continue;
		}
		if(mp[id].rank.begin()->first==(++mp[id].rank.begin())->first){
			if(mp[id].rank.begin()->second=='M'&&(++mp[id].rank.begin())->second=='E'){
				printf("%d %c\n",mp[id].rank.begin()->first,'E');
			}else printf("%d %c\n",mp[id].rank.begin()->first,mp[id].rank.begin()->second);
		}else 
		printf("%d %c\n",mp[id].rank.begin()->first,mp[id].rank.begin()->second);
	}
	return 0;
}
/*
5 6
310101 98 85 88
310102 70 95 88
310103 82 87 94
310104 91 91 91
310105 85 90 90
310101
310102
310103
310104
310105
999999
*/
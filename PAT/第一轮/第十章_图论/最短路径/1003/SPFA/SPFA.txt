#include<bits/stdc++.h> 
using namespace std;
const int maxn=510;
const int inf=0x3fffffff;
struct Node{
	int to,dis;
	Node(int a,int b):to(a),dis(b){}
};
vector<Node> G[maxn];
int n,m,c1,c2,weight[maxn],w[maxn];
int d[maxn],numinq[maxn],num_path[maxn];
bool inq[maxn];
set<int> pre[maxn];
bool SPFA(int s){
	fill(d,d+maxn,inf);
//	fill(w,w+maxn,0);
	d[s]=0;
	w[s]=weight[s];
	num_path[s]=1;
	queue<int> q;
	q.push(s);
	inq[s]=true;
	numinq[s]++;
	while(!q.empty()){
		int u=q.front();q.pop();
		inq[u]=false;
		for(auto i:G[u]){
			int v=i.to,dis=i.dis;
			if(d[u]+dis<d[v]){
				d[v]=d[u]+dis;
				pre[v].clear();
				pre[v].insert(u);
				num_path[v]=num_path[u];
				w[v]=w[u]+weight[v];
				if(!inq[v]){
					q.push(v);
					inq[v]=1;
					if(++numinq[v]>n-1) return false;
				}
			}else if(d[u]+dis==d[v]){
				pre[v].insert(u);
				if(w[u]+weight[v]>w[v]) w[v]=w[u]+weight[v];
				num_path[v]=0;
				for(auto i:pre[v])
					num_path[v]+=num_path[i];
				if(!inq[v]){
					q.push(v);
					inq[v]=1;
					if(++numinq[v]>=n) return false;
				}
			}
		}
	}
	return true;
}
int main() {
	cin>>n>>m>>c1>>c2;
	for(int i=0;i<n;i++)
		scanf("%d",&weight[i]);
	int u,v,dis;
	for(int i=0;i<m;i++){
		cin>>u>>v>>dis;
		G[u].push_back(Node(v,dis));
		G[v].push_back(Node(u,dis)); 
	}
	SPFA(c1);
	printf("%d %d",num_path[c2],w[c2]);
	return 0;
}
/*
5 6 0 2
1 2 1 5 3
0 1 1
0 2 2
0 3 1
1 2 1
2 4 1
3 4 1
*/
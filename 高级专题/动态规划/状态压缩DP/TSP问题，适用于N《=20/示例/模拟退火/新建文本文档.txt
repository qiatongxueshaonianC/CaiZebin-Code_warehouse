#include<bits/stdc++.h> 
using namespace std;
const int maxn=110;
struct Point{
	string name;
	double x,y;
	int id;
};
int N;
vector<Point> cur,p;
double sum,dis[maxn][maxn];
double get_dis(Point A,Point B){
	double res=sqrt((A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y));
}
double get_sumdis(vector<Point> A){
	double res=0;
	for(int i=1;i<A.size();i++)
		res+=get_dis(A[i-1],A[i]);
	res+=get_dis(A[A.size()-1],A[0]);
	return res;
}
void init(){
	cin>>N;
	p.resize(N);
	for(int i=0;i<N;i++)
		cin>>p[i].name>>p[i].x>>p[i].y,p[i].id=i;
	for(int i=0;i<N;i++){
		for(int j=0;j<N;j++){
			dis[i][j]=dis[j][i]=get_dis(p[i],p[j]);
		}
	}
	sum=get_sumdis(p);
	cur=p;
}
void Monte_carlo(vector<Point>& A){
	for(int i=0;i<8000;i++){
		for(int k=0;k<A.size();k++){
			int j=rand()%N;
			swap(A[k],A[j]);
			double new_sum=get_sumdis(A);
			if(new_sum<sum){
				sum=new_sum;
			}
		}
	}
	p=A;
}
void Solve(){
	init();
	Monte_carlo(cur);
	double T=100,T_min=1e-8;
	while(T>T_min){
		int i=rand()*rand()%N,j=rand()*rand()%N;
		if(i==j)
			continue;
		swap(cur[i],cur[j]);
		double new_sum=get_sumdis(cur);
		double dE=sum-new_sum;
		if(dE>=0||exp(dE/T)>(rand()*rand())%10001/10000.0){
			sum=new_sum;
			p=cur;
		}
		T*=0.99;
	}
	setiosflags(ios::fixed);
	cout<<setprecision(4)<<sum<<endl;
	for(int i=0;i<p.size();i++)
		cout<<p[i].name<<(i==p.size()-1?"\n":" ");
}
int main(){
	std::ios::sync_with_stdio(false);
	Solve();
}
/*
16
A 2.5 4.0
B 1.2 -2.4
C 8.7 1.2
D 3.6 12.1
E -5.5 0.94
F -6.6 -12.6
G 0.18 5.219
H 12.5 14.3609
I 22.5 -5.26
J 1.61 4.5
K 2.1 -5.6
L 0 25
M 9.2 -32
N -1 7
O -5 -8
P 21 35
*/ 
使用dp[pos][pre]:	(2019南大、HDU2089)
	在for循环中：for(int i=0;i<=up;i++)这里就会进行一次剪枝，把违反规定的i给跳过了，所以不符合条件的情况都不会进入递归中。
也就是说最后到达pos==-1的情况都是合法的，当然这里需要有一个“标识”，即：pre。dp[pos][pre]表示的含义是：在pos位的数中，当它
的前一位是pre的时候（这时候应该在求的是pos+1位的数），对应的情况有多少。例如dp[5][4]表示的是：一个6位数的数字，当它的第六位
是4的时候，包含了几个解。
	关键点：理解dp[pos][pre]的含义：有一个pos+1位的数，当它的第pos+1位的数是pre的时候，前pos位数没有限制的情况一共包含了
几个解。特点：在循环中包含了剪枝，违法条件的i跳过。局部的解不依赖于全局。局部的解不依赖于全局。局部的解不依赖于全局。局部的解不依赖于全局。
	pos==1时返回的值：return 1；



使用dp[pos][sum]:	(HDU3709,POJ3252,PAT甲级1049）
	在for循环中：for(int i=0;i<=up;i++)中的所有i都会进入递归。局部的解无法确定全局的解。例如：PAT1049中，你局部有几个1，决定不了
这个数最终有几个1，需要做的是把前面的结果作为参数sum传递下去。
	dp[pos][sum]表示的含义是：这个数，你前面传过来的值是sum，接下来还剩有pos位的数进行考虑。
	pos==1时的返回值：和sum有关。例如：
		PAT中: return sum;
		HDU3709中： return sum>0?1:0;
		POJ3252中：return sum>=init?1:0;

2020/4/20/00：22再次阅读的感悟：分辨是用pre还是用sum：想清楚当pos==-1时，返回的值是return 1;还是和一个"整体的量"sum有关
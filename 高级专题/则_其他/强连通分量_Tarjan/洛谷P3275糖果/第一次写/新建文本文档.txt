#pragma warning(disable:4996)
#include<bits/stdc++.h>
using namespace std;
const int maxn = 100000 + 10;
struct Node {
	int id, type;
	Node(int a, int b) :id(a), type(b) {};
};
int N, K, idx[maxn], lowidx[maxn], dfs_num, components[maxn] = { 0 }, num_cmp;
vector<vector<Node>>G(maxn);
vector<set<int>> A(maxn);
bool Have_solution = true;
stack<int> stk;
vector<set<int>> Topo;
int indegree[maxn],cost[maxn];
void Tarjan(int u) {
	idx[u] = lowidx[u] = ++dfs_num;
	stk.push(u);
	for (auto i : G[u]) {
		int v = i.id;
		if (idx[v] == 0) {
			Tarjan(v);
			lowidx[u] = min(lowidx[u], lowidx[v]);
		}
		else if (components[v] == 0) {
			lowidx[u] = min(lowidx[u], idx[v]);
		}
	}
	if (idx[u] == lowidx[u]) {
		int t = 0;
		++num_cmp;
		set<int>& st = A[num_cmp];
		do {
			t = stk.top(); stk.pop();
			st.insert(t);
			components[t] = num_cmp;
		} while (t != u);
	}
}
void Solve() {
	queue<int> q;
	for (int i = 1; i <= num_cmp; i++) {
		if (indegree[i] == 0) {
			q.push(i);
			cost[i] = 1;
		}
	}
	long long ans = 0;
	while (!q.empty()) {
		auto now = q.front(); q.pop();
		for (auto i : Topo[now]) {
			indegree[i]--;
			cost[i] = max(cost[i], cost[now] + 1);
			if (indegree[i] == 0) {
				q.push(i);
			}
		}
	}
	for(int i=1;i<=num_cmp;i++){
	    ans+=1ll*A[i].size()*cost[i];
	}
	cout << ans;
}
int main() {
	scanf("%d%d", &N, &K);
	int op = 0, u, v;
	for (int i = 0; i < K; i++) {
		scanf("%d%d%d", &op, &u, &v);
		if (op == 1) {
			G[u].push_back(Node(v, 1));
			G[v].push_back(Node(u, 1));
		}
		else if (op == 3) {
			G[v].push_back(Node(u, 1));
		}
		else if (op == 2) {
			G[u].push_back(Node(v, 2));
		}
		else if (op == 4) {
			G[v].push_back(Node(u, 2));
		}else{
		    G[u].push_back(Node(v,1));
		}
	}
	for (int i = 1; i <= N; i++) {
		if (idx[i] == 0) {
			Tarjan(i);
		}
	}
	//	reverse(A.begin(), A.end());
	Topo.resize(num_cmp + 1);
	for (int i = 1; i <= N; i++) {
		for (auto t : G[i]) {
			int v = t.id;
			int from = components[i];
			int to = components[v];
			if (components[i] != components[v] ) {
				if (Topo[from].find(to) == Topo[from].end()) {
					Topo[from].insert(to);
					indegree[to]++;
				}
			}
			else {
				if (t.type == 2){
				    puts("-1");
		            return 0;
				}
			}
		}
	}
	Solve();
	return 0;
}
/*
5 7
1 1 2
2 3 2
4 4 1
3 4 5
5 4 5
2 3 5
4 5 1
*/